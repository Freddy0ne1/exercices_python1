"""
Exercice 08 - D√©corateurs

Dans cet exercice, nous allons cr√©er un d√©corateur qui affiche un message
avant et apr√®s l'ex√©cution d'une fonction qui ne prend pas d'arguments.
Ce d√©corateur sera appliqu√© √† une fonction de test.
"""


def log_decorator(func):
    """
    D√©corateur qui affiche un message avant et apr√®s
    l'ex√©cution d'une fonction sans argument.

    Args:
        func (function): La fonction cible √† ex√©cuter.

    Returns:
        function: Une nouvelle fonction qui ajoute des messages
        autour de l'ex√©cution de la fonction d'origine.
    """

    def wrapper():
        """Fonction interne qui ex√©cute la fonction cible
        et affiche des messages avant et apr√®s son ex√©cution.
        """
        # Message avant l'ex√©cution de la fonction
        print("üîπ D√©but de l'ex√©cution de la fonction...")

        # Appel de la fonction originale
        result = func()

        # Message apr√®s l'ex√©cution de la fonction
        print("‚úÖ Fin de l'ex√©cution de la fonction.")

        # Retour du r√©sultat √©ventuel
        return result

    return wrapper


# üéØ Fonction de test √† d√©corer
@log_decorator
def function_test():
    """
    Fonction de test qui ne prend pas d'arguments
    et affiche simplement un message.
    """
    print("Cette fonction ne prend pas d'arguments.")


# ‚ñ∂Ô∏è Appel de la fonction d√©cor√©e
function_test()
