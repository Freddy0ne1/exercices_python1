"""Exercice 04 - Classes et m√©thodes (version d√©butant)
# üìù Cet exercice pr√©sente deux classes : MyClass pour un nom complet
# et OtherClass pour un pr√©nom et un nom s√©par√©s."""

# Exercice 04 - Classes et m√©thodes (version d√©butant)


# üéì Classe pour afficher un nom complet (pr√©nom + nom ensemble)
class MyClass:
    """Classe repr√©sentant une personne avec un nom complet."""

    def __init__(self, full_name):
        # Attribut pour stocker le nom complet
        self.full_name = full_name

    def display_name(self):
        """Affiche le nom complet."""
        print("Le nom complet est :", self.full_name)


# ‚ûï Classe s√©par√©e pour g√©rer pr√©nom et nom individuellement
class OtherClass:
    """Classe repr√©sentant une personne avec un pr√©nom et un nom."""

    def __init__(self, first_name, last_name):
        # Attributs pour stocker le pr√©nom et le nom s√©par√©ment
        self.first_name = first_name
        self.last_name = last_name

    def display_name(self):
        """Affiche le pr√©nom suivi du nom."""
        print("Nom complet :", self.first_name, self.last_name)


# üß™ Partie test pour voir comment les classes fonctionnent

# Exemple 1 : Utilisation de la classe MyClass
print("\nExemple avec MyClass - Nom complet")
person1 = MyClass("Alice Dupont")
person1.display_name()

# Ligne vide pour s√©parer les sorties
print()

# Exemple 2 : Utilisation de la classe OtherClass
print("Exemple avec OtherClass - Pr√©nom et nom s√©par√©s")
identity1 = OtherClass("Alice", "Dupont")
identity1.display_name()
# Ligne vide pour s√©parer les sorties
print()
